// app/api/line/webhook/route.ts
import { NextRequest, NextResponse } from "next/server";
import {
  verifyLineSignature,
  lineReplyMessages,
  lineReplyText,
  buildPromoFlex,
  buildCreditHelpFlex,
  LineMessage,
} from "@/lib/line";
import { buildPromoReplyFromText, promoSummary } from "@/lib/promos";
import { askAI } from "@/lib/ai";
import { trackUserId } from "@/lib/users";

export const runtime = "nodejs";

const BRAND_NAME = process.env.BRAND_NAME ?? "‡∏°‡∏µ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏≠‡∏ó‡∏Ñ‡∏≠‡∏°";
const LINE_HANDLE = process.env.LINE_OA_HANDLE ?? "@mechoke";
const SIGNUP_URL = process.env.SIGNUP_URL || "https://www.mechoke.com/";
const LINE_ISSUE_URL = process.env.LINE_ISSUE_URL || "https://lin.ee/t52Y9Nm";
const TELEGRAM_URL = process.env.TELEGRAM_URL || "https://t.me/+BR_qCVWcre40NTc9";

// ---------- Router (Quick answers ‚Äì female tone) ----------
function routeQuickAnswerToMessages(text: string): LineMessage[] | null {
  const t = text.toLowerCase().trim();

  // ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£ (Flex)
  if (/(‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£|‡πÇ‡∏õ‡∏£‡∏†‡∏≤‡∏û|promotion image|‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏ö‡∏ö‡∏£‡∏π‡∏õ)/i.test(t)) {
    return [buildPromoFlex({ ctaUrl: SIGNUP_URL })];
  }

  // ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô
  if (/(‡πÇ‡∏õ‡∏£|promotion|‡πÇ‡∏õ‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ|‡πÇ‡∏õ‡∏£ ‡∏û‡∏¥‡πÄ‡∏®‡∏©|‡∏ù‡∏≤‡∏Å 300|‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°|‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô|vip)/i.test(t)) {
    if (/(‡πÇ‡∏õ‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ|‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á|promotion)/i.test(t)) {
      return [{ type: "text", text: promoSummary() }];
    }
    const reply = buildPromoReplyFromText(text);
    if (reply) return [{ type: "text", text: reply }];
  }

  // ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤
  if (/(‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï|‡πÄ‡∏á‡∏¥‡∏ô|‡∏¢‡∏≠‡∏î).*(‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤|‡πÑ‡∏°‡πà‡∏°‡∏≤|‡∏´‡∏≤‡∏¢)/i.test(t)) {
    return [
      buildCreditHelpFlex(),
      {
        type: "text",
        text: [
          "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏∞ üôè",
          "‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á '‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏™‡∏°‡∏±‡∏Ñ‡∏£' + '‡πÄ‡∏ß‡∏•‡∏≤/‡∏¢‡∏≠‡∏î‡∏ù‡∏≤‡∏Å' + '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£/‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡πà‡∏≠' ‡∏Ñ‡πà‡∏∞",
          `‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ${LINE_ISSUE_URL}`,
        ].join("\n"),
      },
    ];
  }

  // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
  if (/(‡∏™‡∏°‡∏±‡∏Ñ‡∏£|regis|register)/i.test(t)) {
    return [
      {
        type: "text",
        text: [
          "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‚ú®",
          `‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏°‡∏±‡∏Ñ‡∏£: ${SIGNUP_URL}`,
          "‡∏ù‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°‡∏ü‡∏£‡∏µ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏Ñ‡πà‡∏∞ üéÅ",
        ].join("\n"),
      },
    ];
  }

  // ‡∏ñ‡∏≠‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
  if (/(‡∏ñ‡∏≠‡∏ô|withdraw).*(‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà|min|‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥)/i.test(t)) {
    return [{ type: "text", text: "‡∏ñ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 100 ‡∏ö‡∏≤‡∏ó‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ 24 ‡∏ä‡∏°. ‚è±Ô∏è" }];
  }

  // ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏ú‡∏•/‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
  if (/(‡∏´‡∏ß‡∏¢|‡∏•‡∏≤‡∏ß|‡∏Æ‡∏≤‡∏ô‡∏≠‡∏¢|‡∏´‡∏∏‡πâ‡∏ô|‡πÄ‡∏ß‡∏•‡∏≤|‡∏≠‡∏≠‡∏Å‡∏ú‡∏•|‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö)/i.test(t)) {
    return [
      {
        type: "text",
        text: [
          "‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏ú‡∏•/‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á) ‡∏Ñ‡πà‡∏∞",
          "‚Ä¢ ‡∏•‡∏≤‡∏ß‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á 12:30 ‡∏ô.",
          "‚Ä¢ ‡∏•‡∏≤‡∏ß‡∏™‡∏ö‡∏≤‡∏¢‡∏î‡∏µ 15:00 ‡∏ô.",
          "‚Ä¢ ‡∏•‡∏≤‡∏ß‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤ 17:30 ‡∏ô.",
          "‚Ä¢ ‡∏Æ‡∏≤‡∏ô‡∏≠‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥ 18:30 ‡∏ô.",
          "‚Ä¢ ‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢‡∏£‡∏≠‡∏ö‡∏ö‡πà‡∏≤‡∏¢ 16:30 ‡∏ô.",
          `‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ú‡∏•: ${TELEGRAM_URL}`,
          `‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô LINE OA ${LINE_HANDLE} ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞`,
        ].join("\n"),
      },
    ];
  }

  return null;
}

// ---------- POST: LINE Webhook ----------
export async function POST(req: NextRequest) {
  const signature = req.headers.get("x-line-signature") || undefined;
  const rawBody = await req.text();

  const isDev = process.env.NODE_ENV !== "production";
  if (!isDev) {
    const ok = verifyLineSignature(rawBody, signature);
    if (!ok) return NextResponse.json({ error: "Invalid signature" }, { status: 401 });
  }

  const body = JSON.parse(rawBody || "{}");
  const events: any[] = body.events ?? [];

  for (const e of events) {
    try {
      await trackUserId(e?.source?.userId);

      if (e.type !== "message" || e.message?.type !== "text") continue;

      const userText: string = e.message.text || "";
      let msgs = routeQuickAnswerToMessages(userText);

      if (!msgs) {
        const aiText = await askAI(userText);
        msgs = [{ type: "text", text: aiText }];
      }

      await lineReplyMessages(e.replyToken, msgs);
    } catch (err) {
      try {
        await lineReplyText(e.replyToken, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ üôè");
      } catch {}
      console.error("[webhook error]", err);
    }
  }

  return NextResponse.json({ ok: true });
}

// ---------- GET: Health ----------
export function GET() {
  return NextResponse.json({
    ok: true,
    brand: BRAND_NAME,
    handle: LINE_HANDLE,
    signup: SIGNUP_URL,
    issue: LINE_ISSUE_URL,
    telegram: TELEGRAM_URL,
    hint: "LINE ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å endpoint ‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ POST ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏∞",
  });
}