// app/api/line/webhook/route.ts
import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";
import {
  verifyLineSignature,
  lineReplyMessages,
  lineReplyText,
  buildPromoFlex,
  buildCreditHelpFlex,
  LineMessage,
} from "@/lib/line";
import { buildPromoReplyFromText, promoSummary } from "@/lib/promos";

export const runtime = "nodejs"; // ‡πÉ‡∏ä‡πâ Node runtime (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ HMAC)

const BRAND_NAME = process.env.BRAND_NAME ?? "‡∏°‡∏µ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏≠‡∏ó‡∏Ñ‡∏≠‡∏°";
const LINE_HANDLE = process.env.LINE_OA_HANDLE ?? "@mechoke";

// ---------- Quick Router -> ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡πÄ‡∏ü‡∏•‡πá‡∏Å‡∏ã‡πå ----------
function routeQuickAnswerToMessages(text: string): LineMessage[] | null {
  const t = text.toLowerCase().trim();

  // ‡∏Ç‡∏≠ "‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£" ‡πÄ‡∏õ‡πá‡∏ô Flex
  if (/(‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£|‡πÇ‡∏õ‡∏£‡∏†‡∏≤‡∏û|promotion image|‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏ö‡∏ö‡∏£‡∏π‡∏õ)/i.test(t)) {
    return [buildPromoFlex({ ctaUrl: "https://your-signup-link.example" })];
  }

  // ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô (‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å lib/promos.ts)
  if (/(‡πÇ‡∏õ‡∏£|promotion|‡πÇ‡∏õ‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ|‡πÇ‡∏õ‡∏£ ‡∏û‡∏¥‡πÄ‡∏®‡∏©|‡∏ù‡∏≤‡∏Å 300|‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°|‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô|vip)/i.test(t)) {
    if (/(‡πÇ‡∏õ‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ|promotion|‡πÇ‡∏õ‡∏£ ‡∏û‡∏¥‡πÄ‡∏®‡∏©|‡πÇ‡∏õ‡∏£ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î|‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á)/i.test(t)) {
      return [{ type: "text", text: promoSummary() }];
    }
    const reply = buildPromoReplyFromText(text);
    if (reply) return [{ type: "text", text: reply }];
  }

  // ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ ‚Üí ‡∏™‡πà‡∏á Flex ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏≠‡∏Å + ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏µ‡πâ‡πÅ‡∏à‡∏á
  if (/(‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï|‡πÄ‡∏á‡∏¥‡∏ô|‡∏¢‡∏≠‡∏î).*(‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤|‡πÑ‡∏°‡πà‡∏°‡∏≤|‡∏´‡∏≤‡∏¢)/i.test(t)) {
    return [
      buildCreditHelpFlex(),
      {
        type: "text",
        text: [
          "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏∞ üôè",
          "‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á '‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£' + '‡πÄ‡∏ß‡∏•‡∏≤/‡∏¢‡∏≠‡∏î‡∏ù‡∏≤‡∏Å' + '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£/‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡πà‡∏≠'",
          "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏Ñ‡πà‡∏∞ üí¨",
        ].join("\n"),
      },
    ];
  }

  // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
  if (/(‡∏™‡∏°‡∏±‡∏Ñ‡∏£|regis|register)/i.test(t)) {
    return [
      {
        type: "text",
        text: [
          "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‚ú®",
          "‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏°‡∏±‡∏Ñ‡∏£: https://your-signup-link.example (‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö)",
          "‡∏ù‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°‡∏ü‡∏£‡∏µ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏Ñ‡πà‡∏∞ üéÅ",
        ].join("\n"),
      },
    ];
  }

  // ‡∏ñ‡∏≠‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
  if (/(‡∏ñ‡∏≠‡∏ô|withdraw).*(‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà|min|‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥)/i.test(t)) {
    return [{ type: "text", text: "‡∏ñ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 100 ‡∏ö‡∏≤‡∏ó‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ 24 ‡∏ä‡∏°. ‚è±Ô∏è" }];
  }

  // ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏ú‡∏•/‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
  if (/(‡∏´‡∏ß‡∏¢|‡∏•‡∏≤‡∏ß|‡∏Æ‡∏≤‡∏ô‡∏≠‡∏¢|‡∏´‡∏∏‡πâ‡∏ô|‡πÄ‡∏ß‡∏•‡∏≤|‡∏≠‡∏≠‡∏Å‡∏ú‡∏•|‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö)/i.test(t)) {
    return [
      {
        type: "text",
        text: [
          "‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏ú‡∏• (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á):",
          "‚Ä¢ ‡∏•‡∏≤‡∏ß‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á 12:30 ‡∏ô.",
          "‚Ä¢ ‡∏•‡∏≤‡∏ß‡∏™‡∏ö‡∏≤‡∏¢‡∏î‡∏µ 15:00 ‡∏ô.",
          "‚Ä¢ ‡∏•‡∏≤‡∏ß‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤ 17:30 ‡∏ô.",
          "‚Ä¢ ‡∏Æ‡∏≤‡∏ô‡∏≠‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥ 18:30 ‡∏ô.",
          "‚Ä¢ ‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢‡∏£‡∏≠‡∏ö‡∏ö‡πà‡∏≤‡∏¢ 16:30 ‡∏ô.",
          `‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà ${LINE_HANDLE}`,
        ].join("\n"),
      },
    ];
  }

  return null; // ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á pattern ‚Üí ‡πÉ‡∏´‡πâ AI ‡∏ï‡∏≠‡∏ö
}

// ---------- OpenAI (Fallback) ----------
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });

async function askAI(userMsg: string) {
  const systemPrompt = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå ${BRAND_NAME} (LINE OA ${LINE_HANDLE})
‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö: ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÉ‡∏ä‡πâ‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô, ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏°‡∏±‡∏Ñ‡∏£, ‡∏ù‡∏≤‡∏Å-‡∏ñ‡∏≠‡∏ô, ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤, ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏ú‡∏•/‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö, ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤:
- ‡∏ñ‡πâ‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏û‡∏π‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤: ‡∏Ç‡∏≠ "‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£" + "‡πÄ‡∏ß‡∏•‡∏≤/‡∏¢‡∏≠‡∏î‡∏ù‡∏≤‡∏Å" + "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£/‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡πà‡∏≠"
- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÇ‡∏õ‡∏£: ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡∏ù‡∏≤‡∏Å 300 ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏° + ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô (‡∏´‡πâ‡∏≤‡∏°‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï)
- ‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏ß‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ LINE OA ${LINE_HANDLE} ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  `.trim();

  const ai = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    temperature: 0.35,
    messages: [
      { role: "system", content: systemPrompt },
      { role: "user", content: userMsg },
    ],
  });

  return ai.choices[0]?.message?.content?.trim() || "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üôè";
}

// ---------- POST: LINE Webhook ----------
export async function POST(req: NextRequest) {
  const signature = req.headers.get("x-line-signature") || undefined;
  const rawBody = await req.text();

  // Prod: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô | Dev: ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏™‡∏á‡πà‡∏≤‡∏¢
  const isDev = process.env.NODE_ENV !== "production";
  if (!isDev) {
    const ok = verifyLineSignature(rawBody, signature);
    if (!ok) return NextResponse.json({ error: "Invalid signature" }, { status: 401 });
  }

  const body = JSON.parse(rawBody || "{}");
  const events: any[] = body.events ?? [];

  for (const e of events) {
    try {
      if (e.type !== "message" || e.message?.type !== "text") continue;

      const userText: string = e.message.text || "";
      let msgs = routeQuickAnswerToMessages(userText);

      if (!msgs) {
        const aiText = await askAI(userText);
        msgs = [{ type: "text", text: aiText }];
      }

      await lineReplyMessages(e.replyToken, msgs);
    } catch (err) {
      try {
        await lineReplyText(e.replyToken, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ üôè");
      } catch {}
      console.error("[webhook error]", err);
    }
  }

  return NextResponse.json({ ok: true });
}

// ---------- GET: Health / ‡πÄ‡∏ä‡πá‡∏Å path ‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå ----------
export function GET() {
  return NextResponse.json({
    ok: true,
    brand: BRAND_NAME,
    handle: LINE_HANDLE,
    hint: "LINE ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å endpoint ‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ POST ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
  });
}