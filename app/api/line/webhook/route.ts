// app/api/line/webhook/route.ts
import { NextRequest, NextResponse } from "next/server";
import {
  verifyLineSignature,
  lineReplyMessages,
  lineReplyText,
  buildPromoFlex,
  buildCreditHelpFlex,
  LineMessage,
  buildLuckyNewsFlex,
} from "@/lib/line";
import { buildPromoReplyFromText, promoSummary } from "@/lib/promos";
import { findTimesByText, formatDrawList } from "@/lib/lotto-times";
import { answerLotteryAI, fetchLuckyNews } from "@/lib/ai";

export const runtime = "nodejs"; // HMAC ‡∏ï‡πâ‡∏≠‡∏á Node runtime

const BRAND_NAME = process.env.BRAND_NAME ?? "‡∏°‡∏µ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏≠‡∏ó‡∏Ñ‡∏≠‡∏°";
const LINE_HANDLE = process.env.LINE_OA_HANDLE ?? "@mechoke";

/** ---------------- Quick Router ---------------- */
function routeQuickAnswerToMessages(text: string): LineMessage[] | null {
  const t = (text || "").toLowerCase().trim();

  // ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‚Üí ‡πÉ‡∏´‡πâ handler ‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏õ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á Flex
  if (/(‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏ß‡∏¢|‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î|‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß|‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î.*(‡∏´‡∏ß‡∏¢|‡πÄ‡∏•‡∏Ç)|‡∏Ç‡πà‡∏≤‡∏ß.*‡∏´‡∏ß‡∏¢|‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏ß‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)/i.test(t)) {
    return [{ type: "text", text: "__INTENT_NEWS__" } as any];
  }

  // ‡∏Ç‡∏≠ "‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£" ‡πÄ‡∏õ‡πá‡∏ô Flex
  if (/(‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£|‡πÇ‡∏õ‡∏£‡∏†‡∏≤‡∏û|promotion image|‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏ö‡∏ö‡∏£‡∏π‡∏õ)/i.test(t)) {
    return [buildPromoFlex({ ctaUrl: "https://your-signup-link.example" })];
  }

  // ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô
  if (/(‡πÇ‡∏õ‡∏£|promotion|‡πÇ‡∏õ‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ|‡πÇ‡∏õ‡∏£ ‡∏û‡∏¥‡πÄ‡∏®‡∏©|‡∏ù‡∏≤‡∏Å 300|‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°|‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô|vip)/i.test(t)) {
    if (/(‡πÇ‡∏õ‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ|promotion|‡πÇ‡∏õ‡∏£ ‡∏û‡∏¥‡πÄ‡∏®‡∏©|‡πÇ‡∏õ‡∏£ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î|‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á)/i.test(t)) {
      return [{ type: "text", text: promoSummary() }];
    }
    const reply = buildPromoReplyFromText(text);
    if (reply) return [{ type: "text", text: reply }];
  }

  // ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤
  if (/(‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï|‡πÄ‡∏á‡∏¥‡∏ô|‡∏¢‡∏≠‡∏î).*(‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤|‡πÑ‡∏°‡πà‡∏°‡∏≤|‡∏´‡∏≤‡∏¢)/i.test(t)) {
    return [
      buildCreditHelpFlex(),
      {
        type: "text",
        text: [
          "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏∞ üôè",
          "‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á '‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£' + '‡πÄ‡∏ß‡∏•‡∏≤/‡∏¢‡∏≠‡∏î‡∏ù‡∏≤‡∏Å' + '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£/‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡πà‡∏≠'",
          "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏Ñ‡πà‡∏∞ üí¨",
        ].join("\n"),
      },
    ];
  }

  // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
  if (/(‡∏™‡∏°‡∏±‡∏Ñ‡∏£|regis|register)/i.test(t)) {
    return [
      {
        type: "text",
        text: [
          "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‚ú®",
          "‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏°‡∏±‡∏Ñ‡∏£: https://your-signup-link.example (‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö)",
          "‡∏ù‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°‡∏ü‡∏£‡∏µ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏Ñ‡πà‡∏∞ üéÅ",
        ].join("\n"),
      },
    ];
  }

  // ‡∏ñ‡∏≠‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
  if (/(‡∏ñ‡∏≠‡∏ô|withdraw).*(‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà|min|‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥)/i.test(t)) {
    return [{ type: "text", text: "‡∏ñ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 100 ‡∏ö‡∏≤‡∏ó‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ 24 ‡∏ä‡∏°. ‚è±Ô∏è" }];
  }

  // ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏ú‡∏•/‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö
  if (/(‡πÄ‡∏ß‡∏•‡∏≤|‡∏≠‡∏≠‡∏Å‡∏ú‡∏•|‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö|‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏¥‡∏î|‡∏ï‡∏≤‡∏£‡∏≤‡∏á).*(‡∏´‡∏ß‡∏¢|‡∏•‡∏≤‡∏ß|‡∏Æ‡∏≤‡∏ô‡∏≠‡∏¢|‡∏´‡∏∏‡πâ‡∏ô|‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏•|‡∏¢‡∏µ‡πà‡∏Å‡∏µ|‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®|‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)?/i.test(t)) {
    const list = findTimesByText(text);
    if (list.length) {
      return [{ type: "text", text: formatDrawList(list) }];
    }
    return [
      {
        type: "text",
        text: [
          "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏ä‡πà‡∏ô:",
          "‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏ú‡∏• ‡∏•‡∏≤‡∏ß",
          "‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏ú‡∏• ‡∏Æ‡∏≤‡∏ô‡∏≠‡∏¢",
          "‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏ú‡∏• ‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢ / ‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®",
          "‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå: ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏ú‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        ].join("\n"),
      },
    ];
  }

  return null; // ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á pattern ‚Üí ‡πÉ‡∏´‡πâ AI ‡∏ï‡∏≠‡∏ö
}

/** ---------------- POST: LINE Webhook ---------------- */
export async function POST(req: NextRequest) {
  const signature = req.headers.get("x-line-signature") || undefined;
  const rawBody = await req.text();

  // prod: ‡∏ï‡∏£‡∏ß‡∏à‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô / dev: ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏™‡∏á‡πà‡∏≤‡∏¢
  const isDev = process.env.NODE_ENV !== "production";
  if (!isDev) {
    const ok = verifyLineSignature(rawBody, signature);
    if (!ok) return NextResponse.json({ error: "Invalid signature" }, { status: 401 });
  }

  const body = JSON.parse(rawBody || "{}");
  const events: any[] = body.events ?? [];

  for (const e of events) {
    try {
      if (e.type !== "message" || e.message?.type !== "text") continue;

      const userText: string = e.message.text || "";
      console.log("[webhook] text:", userText);

      let msgs = routeQuickAnswerToMessages(userText);

      // Intent ‡∏Ç‡πà‡∏≤‡∏ß ‚Üí ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß & ‡∏™‡πà‡∏á Flex
      if (msgs && msgs.length === 1 && (msgs[0] as any).text === "__INTENT_NEWS__") {
        const news = await fetchLuckyNews();
        if (news.length > 0) {
          console.log("[reply] via Flex News");
          await lineReplyMessages(e.replyToken, [buildLuckyNewsFlex(news)]);
          continue;
        } else {
          console.log("[reply] news empty ‚Üí AI text");
          const aiText = await answerLotteryAI("‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", new Date());
          await lineReplyMessages(e.replyToken, [{ type: "text", text: aiText }]);
          continue;
        }
      }

      // Router ‡∏ï‡∏≠‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
      if (msgs && msgs.length > 0) {
        console.log("[reply] via Router/Intent");
        await lineReplyMessages(e.replyToken, msgs);
        continue;
      }

      // AI fallback (‡∏Ç‡πà‡∏≤‡∏ß/‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•/‡∏ù‡∏±‡∏ô/‡∏°‡∏á‡∏Ñ‡∏•/‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)
      const aiText = await answerLotteryAI(userText, new Date());
      console.log("[reply] via AI");
      msgs = [{ type: "text", text: aiText }];
      await lineReplyMessages(e.replyToken, msgs);
    } catch (err) {
      console.error("[webhook error]", err);
      try {
        await lineReplyText(e.replyToken, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ üôè");
      } catch {}
    }
  }

  return NextResponse.json({ ok: true });
}

/** ---------------- GET: Health ---------------- */
export function GET() {
  return NextResponse.json({
    ok: true,
    brand: BRAND_NAME,
    handle: LINE_HANDLE,
    hint: "LINE ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å endpoint ‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ POST ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
  });
}