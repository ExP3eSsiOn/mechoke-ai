// lib/line.ts
import crypto from "crypto";
import type { LuckyItem } from "./ai";

/* =========================
 * Types
 * ========================= */
export type LineTextMessage = { type: "text"; text: string };
export type LineFlexMessage = { type: "flex"; altText: string; contents: any };
export type LineMessage = LineTextMessage | LineFlexMessage;

/* =========================
 * ENV & Defaults
 * ========================= */
const LINE_CHANNEL_ACCESS_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN || "";
const LINE_CHANNEL_SECRET = process.env.LINE_CHANNEL_SECRET || "";

const SIGNUP_URL = (process.env.SIGNUP_URL || "https://www.mechoke.com/").trim();
const LINE_ISSUE_URL = (process.env.LINE_ISSUE_URL || "https://lin.ee/t52Y9Nm").trim();
const TELEGRAM_URL = (process.env.TELEGRAM_URL || "https://t.me/+BR_qCVWcre40NTc9").trim();

/** ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô (‡∏ù‡∏≤‡∏Å 300 ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏° 1 ‡∏ä‡∏¥‡πâ‡∏ô) */
const PROMO_IMG_URL = (process.env.PROMO_IMG_URL || "https://chokede.com/line.jpg").trim();

/* =========================
 * Helpers
 * ========================= */

/** ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LINE API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏ö Bearer token */
async function lineFetch(path: string, init: RequestInit = {}) {
  const res = await fetch(`https://api.line.me${path}`, {
    ...init,
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`,
      ...(init.headers || {}),
    },
  });

  if (!res.ok) {
    const err = await res.text().catch(() => "");
    throw new Error(`LINE ${path} error: ${res.status} ${err}`);
  }
  return res;
}

/** ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ URL ‡πÄ‡∏õ‡πá‡∏ô https:// ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏™‡∏≥‡∏£‡∏≠‡∏á */
function safeHttpsUrl(u?: string | null): string {
  try {
    if (!u) throw new Error("empty");
    const url = new URL(String(u).trim());
    if (url.protocol.toLowerCase() !== "https:") throw new Error("non-https");
    return url.toString();
  } catch {
    // ‡∏£‡∏π‡∏õ‡∏™‡∏≥‡∏£‡∏≠‡∏á (CDN ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞)
    return "https://i.imgur.com/5L2q8cA.jpeg";
  }
}

/* =========================
 * LINE Messaging: reply / push
 * ========================= */
export async function lineReplyMessages(replyToken: string, messages: LineMessage[]) {
  await lineFetch("/v2/bot/message/reply", {
    method: "POST",
    body: JSON.stringify({ replyToken, messages }),
  });
}

export async function lineReplyText(replyToken: string, text: string) {
  return lineReplyMessages(replyToken, [{ type: "text", text }]);
}

/** ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö push (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ userId/roomId/groupId) */
export async function linePush(to: string, messages: LineMessage[]) {
  await lineFetch("/v2/bot/message/push", {
    method: "POST",
    body: JSON.stringify({ to, messages }),
  });
}

/* =========================
 * Signature Verify (HMAC SHA256)
 * ========================= */
export function verifyLineSignature(rawBody: string, signature?: string | null) {
  if (!LINE_CHANNEL_SECRET || !signature) return false;
  const hmac = crypto.createHmac("sha256", LINE_CHANNEL_SECRET);
  hmac.update(rawBody);
  const expected = hmac.digest("base64");
  return expected === signature;
}

/* =========================
 * Flex Builders
 * ========================= */

/** ‡πÇ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô: ‡∏ù‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 300 ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°‡∏ü‡∏£‡∏µ 1 ‡∏ä‡∏¥‡πâ‡∏ô */
export function buildPromoFlex(opts?: { ctaUrl?: string }): LineFlexMessage {
  const cta = (opts?.ctaUrl || SIGNUP_URL).trim();
  const heroUrl = safeHttpsUrl(PROMO_IMG_URL);

  return {
    type: "flex",
    altText: "‡πÇ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô ‚Ä¢ ‡∏ù‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 300 ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°‡∏ü‡∏£‡∏µ 1 ‡∏ä‡∏¥‡πâ‡∏ô‡∏Ñ‡πà‡∏∞ üéÅ",
    contents: {
      type: "bubble",
      hero: {
        type: "image",
        url: heroUrl, // ‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç https:// ‡πÄ‡∏™‡∏°‡∏≠
        size: "full",
        aspectRatio: "16:9",
        aspectMode: "cover",
      },
      body: {
        type: "box",
        layout: "vertical",
        spacing: "md",
        contents: [
          { type: "text", text: "‡πÇ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô", weight: "bold", size: "lg", wrap: true },
          { type: "text", text: "‡∏ù‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 300 ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°‡∏ü‡∏£‡∏µ 1 ‡∏ä‡∏¥‡πâ‡∏ô‡∏Ñ‡πà‡∏∞", size: "sm", color: "#888888", wrap: true },
          { type: "separator" },
          { type: "text", text: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏£‡∏µ‡∏ö‡∏Å‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ô‡∏∞‡∏Ñ‡∏∞ ‚ú®", size: "sm", color: "#666666", wrap: true },
        ],
      },
      footer: {
        type: "box",
        layout: "vertical",
        spacing: "sm",
        contents: [
          { type: "button", style: "primary", color: "#22c55e", action: { type: "uri", label: "‡∏Å‡∏î‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£", uri: cta } },
          { type: "button", style: "secondary", action: { type: "uri", label: "‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (LINE)", uri: LINE_ISSUE_URL } },
          { type: "button", style: "link", action: { type: "uri", label: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏ó‡πÄ‡∏•‡πÅ‡∏Å‡∏£‡∏° (‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)", uri: TELEGRAM_URL } },
        ],
      },
    },
  };
}

/** ‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ */
export function buildCreditHelpFlex(): LineFlexMessage {
  return {
    type: "flex",
    altText: "‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏î‡∏µ‡∏Ñ‡∏∞",
    contents: {
      type: "bubble",
      body: {
        type: "box",
        layout: "vertical",
        spacing: "md",
        contents: [
          { type: "text", text: "‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ ‡πÅ‡∏Å‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏î‡∏µ‡∏Ñ‡∏∞? üõ†Ô∏è", weight: "bold", size: "lg", wrap: true },
          {
            type: "text",
            text: "‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 3 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞:\n1) ‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£\n2) ‡πÄ‡∏ß‡∏•‡∏≤/‡∏¢‡∏≠‡∏î‡∏ù‡∏≤‡∏Å\n3) ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£/‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡πà‡∏≠",
            wrap: true,
            size: "sm",
            color: "#666666",
          },
        ],
      },
      footer: {
        type: "box",
        layout: "vertical",
        spacing: "sm",
        contents: [
          { type: "button", style: "primary", color: "#0ea5e9", action: { type: "uri", label: "‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (LINE)", uri: LINE_ISSUE_URL } },
          { type: "button", style: "link", action: { type: "uri", label: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", uri: SIGNUP_URL } },
        ],
      },
    },
  };
}

/** Flex: ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î (carousel) */
export function buildLuckyNewsFlex(items: LuckyItem[], opts?: { altText?: string }): LineFlexMessage {
  const bubbles = (items || []).slice(0, 10).map((it) => {
    const img = safeHttpsUrl(it.imageUrl || undefined);
    const title = String(it.title || "").slice(0, 120);
    const source = it.source ? String(it.source) : "‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î";
    const url = it.url && /^https?:\/\//i.test(it.url) ? it.url : SIGNUP_URL;

    return {
      type: "bubble",
      hero: { type: "image", url: img, size: "full", aspectRatio: "20:13", aspectMode: "cover" },
      body: {
        type: "box",
        layout: "vertical",
        spacing: "sm",
        contents: [
          { type: "text", text: title || "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î", weight: "bold", size: "md", wrap: true },
          { type: "box", layout: "baseline", contents: [{ type: "text", text: source, size: "xs", color: "#999999", wrap: true }] },
        ],
      },
      footer: {
        type: "box",
        layout: "vertical",
        spacing: "sm",
        contents: [
          { type: "button", style: "primary", action: { type: "uri", label: "‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πà‡∏≤‡∏ß", uri: url } },
          { type: "button", style: "link", action: { type: "uri", label: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", uri: SIGNUP_URL } },
        ],
      },
    };
  });

  // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß -> ‡∏ö‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÄ‡∏û‡∏¥‡πà‡∏° wrap: true ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô TS error)
  if (bubbles.length === 0) {
    bubbles.push({
      type: "bubble",
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          { type: "text", text: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞", weight: "bold", size: "lg", wrap: true },
          { type: "text", text: "‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå: ‡πÇ‡∏õ‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÇ‡∏õ‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", size: "sm", color: "#777777", wrap: true },
        ],
      },
      footer: {
        type: "box",
        layout: "vertical",
        contents: [
          { type: "button", style: "primary", action: { type: "uri", label: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", uri: SIGNUP_URL } },
        ],
      },
    });
  }

  return {
    type: "flex",
    altText: opts?.altText || "‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ñ‡πà‡∏∞ üóûÔ∏è",
    contents: { type: "carousel", contents: bubbles },
  };
}