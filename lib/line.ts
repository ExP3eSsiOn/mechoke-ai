// lib/line.ts
import crypto from "crypto";

export type LineTextMessage = { type: "text"; text: string };
export type LineFlexMessage = {
  type: "flex";
  altText: string;
  contents: any;
};
export type LineMessage = LineTextMessage | LineFlexMessage;

const LINE_CHANNEL_ACCESS_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN || "";
const LINE_CHANNEL_SECRET = process.env.LINE_CHANNEL_SECRET || "";

// ---------- HTTP helpers ----------
async function lineFetch(path: string, init: RequestInit = {}) {
  const res = await fetch(`https://api.line.me${path}`, {
    ...init,
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`,
      ...(init.headers || {}),
    },
  });
  if (!res.ok) {
    const text = await res.text().catch(() => "");
    throw new Error(`LINE API error: ${res.status} ${text}`);
  }
  return res;
}

// ---------- Reply / Push ----------
export async function lineReplyMessages(replyToken: string, messages: LineMessage[]) {
  await lineFetch("/v2/bot/message/reply", {
    method: "POST",
    body: JSON.stringify({ replyToken, messages }),
  });
}

export async function lineReplyText(replyToken: string, text: string) {
  return lineReplyMessages(replyToken, [{ type: "text", text }]);
}

export async function linePush(to: string, messages: LineMessage[]) {
  await lineFetch("/v2/bot/message/push", {
    method: "POST",
    body: JSON.stringify({ to, messages }),
  });
}

// ---------- Signature verify (HMAC) ----------
export function verifyLineSignature(body: string, signature?: string | null) {
  if (!LINE_CHANNEL_SECRET) return false;
  if (!signature) return false;
  const hmac = crypto.createHmac("sha256", LINE_CHANNEL_SECRET);
  hmac.update(body);
  const expected = hmac.digest("base64");
  return expected === signature;
}

// ---------- Flex builders (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡∏°‡πà) ----------
const SIGNUP_URL = process.env.SIGNUP_URL || "https://www.mechoke.com/";
const LINE_ISSUE_URL = process.env.LINE_ISSUE_URL || "https://lin.ee/t52Y9Nm";
const TELEGRAM_URL = process.env.TELEGRAM_URL || "https://t.me/+BR_qCVWcre40NTc9";

/**
 * ‡πÇ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô: ‡∏ù‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 300 ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°‡∏ü‡∏£‡∏µ 1 ‡∏ä‡∏¥‡πâ‡∏ô
 * hero image ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô https://chokede.com/line.jpg
 */
export function buildPromoFlex(opts?: { ctaUrl?: string }): LineFlexMessage {
  const url = opts?.ctaUrl || SIGNUP_URL;
  return {
    type: "flex",
    altText: "‡πÇ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô ‚Ä¢ ‡∏ù‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 300 ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°‡∏ü‡∏£‡∏µ 1 ‡∏ä‡∏¥‡πâ‡∏ô‡∏Ñ‡πà‡∏∞ üéÅ",
    contents: {
      type: "bubble",
      hero: {
        type: "image",
        url: "https://chokede.com/line.jpg", // ‚¨ÖÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á
        size: "full",
        aspectRatio: "16:9",
        aspectMode: "cover",
      },
      body: {
        type: "box",
        layout: "vertical",
        spacing: "md",
        contents: [
          { type: "text", text: "‡πÇ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô", weight: "bold", size: "lg" },
          { type: "text", text: "‡∏ù‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 300 ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°‡∏ü‡∏£‡∏µ 1 ‡∏ä‡∏¥‡πâ‡∏ô‡∏Ñ‡πà‡∏∞", size: "sm", color: "#888888", wrap: true },
          { type: "separator" },
          { type: "text", text: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏£‡∏µ‡∏ö‡∏Å‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ô‡∏∞‡∏Ñ‡∏∞ ‚ú®", size: "sm", color: "#666666", wrap: true },
        ],
      },
      footer: {
        type: "box",
        layout: "vertical",
        spacing: "sm",
        contents: [
          {
            type: "button",
            style: "primary",
            color: "#22c55e",
            action: { type: "uri", label: "‡∏Å‡∏î‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£", uri: url },
          },
          {
            type: "button",
            style: "secondary",
            action: { type: "uri", label: "‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (LINE)", uri: LINE_ISSUE_URL },
          },
          {
            type: "button",
            style: "link",
            action: { type: "uri", label: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏ó‡πÄ‡∏•‡πÅ‡∏Å‡∏£‡∏° (‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)", uri: TELEGRAM_URL },
          },
        ],
      },
    },
  };
}

export function buildCreditHelpFlex(): LineFlexMessage {
  return {
    type: "flex",
    altText: "‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏î‡∏µ‡∏Ñ‡∏∞",
    contents: {
      type: "bubble",
      body: {
        type: "box",
        layout: "vertical",
        spacing: "md",
        contents: [
          { type: "text", text: "‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ ‡πÅ‡∏Å‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏î‡∏µ‡∏Ñ‡∏∞? üõ†Ô∏è", weight: "bold", size: "lg" },
          {
            type: "text",
            text:
              "‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 3 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞:\n1) ‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£\n2) ‡πÄ‡∏ß‡∏•‡∏≤/‡∏¢‡∏≠‡∏î‡∏ù‡∏≤‡∏Å\n3) ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£/‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡πà‡∏≠",
            wrap: true,
            size: "sm",
            color: "#666666",
          },
        ],
      },
      footer: {
        type: "box",
        layout: "vertical",
        spacing: "sm",
        contents: [
          {
            type: "button",
            style: "primary",
            color: "#0ea5e9",
            action: { type: "uri", label: "‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (LINE)", uri: LINE_ISSUE_URL },
          },
          {
            type: "button",
            style: "link",
            action: { type: "uri", label: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", uri: SIGNUP_URL },
          },
        ],
      },
    },
  };
}