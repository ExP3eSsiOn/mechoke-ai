// lib/ai.ts
import OpenAI from "openai";

/* ---------------- Types ---------------- */
export type LuckyItem = {
  title: string;
  url: string;
  imageUrl?: string | null;
  source?: string | null;
  publishedAt?: string | null;
};

/* ---------------- ENV ---------------- */
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || "";
const OPENAI_MODEL =
  process.env.OPENAI_MODEL ||
  "gpt-4o-mini"; // ‡πÄ‡∏ö‡∏≤ ‡πÄ‡∏£‡πá‡∏ß ‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤

const BRAND_NAME = (process.env.BRAND_NAME || "‡∏°‡∏µ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏≠‡∏ó‡∏Ñ‡∏≠‡∏°").trim();
const LINE_HANDLE = (process.env.LINE_OA_HANDLE || "@mechoke").trim();

/* ---------------- OpenAI client ---------------- */
const openai = OPENAI_API_KEY ? new OpenAI({ apiKey: OPENAI_API_KEY }) : null;

/* ---------------- Helpers ---------------- */
function withTimeout<T>(p: Promise<T>, ms = 12000) {
  return Promise.race([
    p,
    new Promise<T>((_, rej) => setTimeout(() => rej(new Error("timeout")), ms)),
  ]) as Promise<T>;
}

async function fetchJSON(url: string) {
  const res = await withTimeout(fetch(url, { cache: "no-store" }));
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  return res.json();
}

/* =========================================================
 * askAI ‚Äî ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á" ‡πÇ‡∏ó‡∏ô‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ router ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ intent ‡∏ï‡∏£‡∏á ‡πÜ
 * =======================================================*/
export async function askAI(
  userMsg: string,
  opts?: { brandName?: string; lineHandle?: string }
): Promise<string> {
  const brand = (opts?.brandName || BRAND_NAME).trim();
  const handle = (opts?.lineHandle || LINE_HANDLE).trim();

  const systemPrompt = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå "${brand}" (LINE OA ${handle})
‡πÇ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö: ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô ‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÉ‡∏ä‡πâ‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ üòä
‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô/‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏°‡∏±‡∏Ñ‡∏£/‡∏ù‡∏≤‡∏Å-‡∏ñ‡∏≠‡∏ô/‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤/‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏ú‡∏•-‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö/‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£:
- ‡∏ñ‡πâ‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏û‡∏π‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á "‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤": ‡∏Ç‡∏≠ 1) ‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£ 2) ‡πÄ‡∏ß‡∏•‡∏≤/‡∏¢‡∏≠‡∏î‡∏ù‡∏≤‡∏Å 3) ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£/‡∏™‡∏•‡∏¥‡∏õ‡∏¢‡πà‡∏≠
- ‡∏ñ‡πâ‡∏≤ "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô": ‡∏¢‡πâ‡∏≥‡πÇ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô ‡∏ù‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 300 ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°‡∏ü‡∏£‡∏µ 1 ‡∏ä‡∏¥‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏ä‡∏ß‡∏ô‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏°‡∏±‡∏Ñ‡∏£
- ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï ‡πÅ‡∏•‡πâ‡∏ß‡∏ä‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
- ‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏ä‡∏¥‡∏ç‡∏ä‡∏ß‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà ${handle} ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  `.trim();

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API key ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô fallback ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û
  if (!openai) {
    return "‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏à‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÇ‡∏õ‡∏£/‡∏™‡∏°‡∏±‡∏Ñ‡∏£/‡∏ù‡∏≤‡∏Å-‡∏ñ‡∏≠‡∏ô/‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏±‡∏Å‡∏´‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà LINE OA " + handle + " ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞ üí¨";
  }

  try {
    const resp = await withTimeout(
      openai.chat.completions.create({
        model: OPENAI_MODEL,
        temperature: 0.35,
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userMsg },
        ],
      }),
      15000
    );

    const text =
      resp.choices?.[0]?.message?.content?.trim() ||
      "‡∏ô‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ üôè";
    return text;
  } catch (e: any) {
    // fallback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenAI ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ï‡∏≠‡∏ö‡∏ä‡πâ‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡∏´‡∏≤‡∏Å‡∏™‡∏ô‡πÉ‡∏à‡πÇ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô ‡∏ù‡∏≤‡∏Å 300 ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°‡∏ü‡∏£‡∏µ 1 ‡∏ä‡∏¥‡πâ‡∏ô ‡∏û‡∏¥‡∏°‡∏û‡πå: ‡πÇ‡∏õ‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏±‡∏Å LINE OA " + handle + " ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ üíñ";
  }
}

/* =========================================================
 * fetchLuckyNews ‚Äî ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î/‡∏î‡∏ß‡∏á/‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠ ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
 * ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
 *   1) LUCKY_FEED_URL (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
 *   2) NEXT_PUBLIC_BASE_URL + /api/lucky-feed (route ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô)
 * =======================================================*/
export async function fetchLuckyNews(limit = 5): Promise<LuckyItem[]> {
  const items: LuckyItem[] = [];

  // 1) ‡∏ü‡∏µ‡∏î‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ)
  const FEED = process.env.LUCKY_FEED_URL?.trim();
  if (FEED) {
    try {
      const data = await fetchJSON(FEED);
      const arr: any[] = data?.items || data?.articles || data || [];
      for (const it of arr) {
        if (!it) continue;
        items.push({
          title: String(it.title ?? it.headline ?? "").trim(),
          url: String(it.url ?? it.link ?? "").trim(),
          imageUrl: it.imageUrl ?? it.image ?? it.thumbnail ?? null,
          source: it.source ?? it.site ?? null,
          publishedAt: it.publishedAt ?? it.pubDate ?? null,
        });
        if (items.length >= limit) break;
      }
    } catch {
      /* ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ */
    }
  }

  // 2) API ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
  if (items.length < limit) {
    const BASE = (process.env.NEXT_PUBLIC_BASE_URL || "").replace(/\/+$/, "");
    if (BASE) {
      try {
        const data = await fetchJSON(`${BASE}/api/lucky-feed?limit=${limit}`);
        const arr: any[] = data?.items || [];
        for (const it of arr) {
          items.push({
            title: String(it.title ?? "").trim(),
            url: String(it.url ?? it.link ?? "").trim(),
            imageUrl: it.imageUrl ?? it.image ?? it.thumbnail ?? null,
            source: it.source ?? it.site ?? null,
            publishedAt: it.publishedAt ?? it.pubDate ?? null,
          });
          if (items.length >= limit) break;
        }
      } catch {
        /* no-op */
      }
    }
  }

  // ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏ã‡πâ‡∏≥
  const uniq = new Map<string, LuckyItem>();
  for (const it of items) {
    if (!it?.title || !it?.url) continue;
    uniq.set(it.url, it);
  }
  return Array.from(uniq.values()).slice(0, limit);
}