// lib/ai.ts
import OpenAI from "openai";

/** ============== Types ============== */
export type AskAIContext = {
  brandName?: string;
  lineHandle?: string;
};

export type LuckyItem = {
  title: string;
  url: string;
  imageUrl?: string;
  source?: string;
  publishedAt?: string;
};

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY!,
});

/**
 * askAI
 * - ‡πÉ‡∏´‡πâ ChatGPT ‡∏ï‡∏≠‡∏ö ‚Äú‡∏ó‡∏∏‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‚Äù (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô/‡∏î‡∏ß‡∏á/‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•/‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°)
 * - ‡πÇ‡∏ó‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏û‡∏≠‡∏î‡∏µ
 */
export async function askAI(userText: string, ctx: AskAIContext = {}): Promise<string> {
  const brand = ctx.brandName || process.env.BRAND_NAME || "‡∏°‡∏µ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏≠‡∏ó‡∏Ñ‡∏≠‡∏°";
  const handle = ctx.lineHandle || process.env.LINE_OA_HANDLE || "@mechoke";

  const systemPrompt = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á" ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå ${brand} (LINE OA ${handle})
‡∏™‡πÑ‡∏ï‡∏•‡πå: ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô ‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô üíñ‚ú®üçÄ
‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï: ‡∏Ñ‡∏∏‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á ‡πÇ‡∏õ‡∏£/‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô/‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏ú‡∏• ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô ‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏• ‡∏î‡∏ß‡∏á ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î (‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠ ‡πÑ‡∏°‡πà‡∏ü‡∏±‡∏ô‡∏ò‡∏á‡πÄ‡∏•‡∏Ç‡∏ï‡∏£‡∏á‡πÜ)
‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á:
- ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô/‡∏î‡∏ß‡∏á/‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•: ‡πÉ‡∏´‡πâ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏¥‡∏î ‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ú‡∏•
- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ${brand}: ‡πÅ‡∏ô‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ ${process.env.SIGNUP_URL || "https://www.mechoke.com/"} ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ${handle} ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
- ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  `.trim();

  const userPrompt = `
‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå: "${userText}"

‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥:
1) ‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏ó‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
2) ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô/‡∏î‡∏ß‡∏á/‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•: ‡∏ï‡∏≠‡∏ö‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏ô‡∏ò‡∏á‡πÄ‡∏•‡∏Ç‡∏ï‡∏£‡∏á‡πÜ
3) ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ${brand}: ‡∏ä‡πà‡∏ß‡∏¢‡∏ä‡∏µ‡πâ‡∏ó‡∏≤‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£/‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
4) ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏û‡∏≠‡∏î‡∏µ
  `.trim();

  try {
    const resp = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      temperature: 0.7,
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt },
      ],
    });

    const text = resp.choices?.[0]?.message?.content?.trim();
    return text || "‡∏ô‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ üôè";
  } catch (err) {
    console.error("[askAI error]", err);
    return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ üôè";
  }
}

/**
 * fetchLuckyNews
 * - ‡∏î‡∏∂‡∏á ‚Äú‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î/‡∏î‡∏ß‡∏á/‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‚Äù ‡∏ú‡πà‡∏≤‡∏ô endpoint ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô /api/lucky-feed
 * - ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ NewsAPI (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ LUCKY_FEED_URL ‡∏ù‡∏±‡πà‡∏á API ‡∏à‡∏∞‡πÑ‡∏õ‡∏î‡∏∂‡∏á/‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
 * - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô [] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ö‡∏¥‡πâ‡∏ß‡∏î‡πå/‡∏£‡∏±‡∏ô‡∏•‡πâ‡∏°
 */
export async function fetchLuckyNews(limit = 5): Promise<LuckyItem[]> {
  // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤ origin ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å endpoint ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
  const internalOrigin =
    process.env.LUCKY_INTERNAL_ORIGIN || // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô https://mechoke-ai.vercel.app
    (process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : "");

  const candidates = [
    internalOrigin ? `${internalOrigin}/api/lucky-feed` : "", // ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏±‡πâ‡∏á LUCKY_INTERNAL_ORIGIN ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ VERCEL_URL
  ].filter(Boolean) as string[];

  for (const endpoint of candidates) {
    try {
      const res = await fetch(`${endpoint}`, { method: "GET", cache: "no-store" });
      if (!res.ok) continue;
      const data = await res.json();
      const items: LuckyItem[] = Array.isArray(data?.items)
        ? data.items.map((it: any) => ({
            title: String(it.title || ""),
            url: String(it.url || it.link || ""),
            imageUrl: it.imageUrl ? String(it.imageUrl) : undefined,
            source: it.source ? String(it.source) : undefined,
            publishedAt: it.publishedAt ? String(it.publishedAt) : undefined,
          }))
        : [];
      if (items.length > 0) return items.slice(0, limit);
    } catch (e) {
      // ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    }
  }

  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏∞‡πÑ‡∏£ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô [] ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏±‡∏á
  return [];
}