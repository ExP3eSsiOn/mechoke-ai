// lib/ai.ts
import OpenAI from "openai";

/** ===== ENV & Branding ===== */
const BRAND_NAME = process.env.BRAND_NAME ?? "‡∏°‡∏µ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏≠‡∏ó‡∏Ñ‡∏≠‡∏°";
const LINE_HANDLE = process.env.LINE_OA_HANDLE ?? "@mechoke";
const OPENAI_KEY = process.env.OPENAI_API_KEY ?? "";
const NEWSAPI_KEY = process.env.NEWSAPI_KEY ?? "";
const SERPAPI_KEY = process.env.SERPAPI_KEY ?? "";
const LUCKY_FEED_URL = process.env.LUCKY_FEED_URL ?? ""; // JSON: [{title,url,publishedAt,source?,imageUrl?}]

/** ===== OpenAI (optional) ===== */
const openai = OPENAI_KEY ? new OpenAI({ apiKey: OPENAI_KEY }) : null;

/** ===== Utilities ===== */
const THAI_DIGITS = "‡πê‡πë‡πí‡πì‡πî‡πï‡πñ‡πó‡πò‡πô";
function thaiToArabic(s: string): string {
  return s.replace(/[‡πê-‡πô]/g, (d) => String(THAI_DIGITS.indexOf(d)));
}
function extractNumbersFromText(text: string): string[] {
  const t = thaiToArabic(text || "");
  const tokens = t.match(/\b\d{1,6}\b/g) || [];
  const hy = t.match(/\b\d(?:[-‚Äì]\d){1,3}\b/g) || [];
  return Array.from(new Set([...tokens, ...hy]));
}
function footerNote() {
  return "‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏ç‡∏≤‡∏ì‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏ä‡∏Ñ ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°";
}

/** ===== Intents ===== */
type Intent =
  | "LUCKY_FROM_NEWS"
  | "LUCKY_FROM_SOCIAL"
  | "LUCKY_FROM_DREAM"
  | "LUCKY_GENERAL"
  | "BELIEF_FAITH"
  | "UNKNOWN";

function detectIntent(text: string): Intent {
  const t = (text || "").toLowerCase().trim();

  if (/(‡∏Ç‡πà‡∏≤‡∏ß|‡∏û‡∏≤‡∏î‡∏´‡∏±‡∏ß|‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î).*(‡πÄ‡∏•‡∏Ç|‡∏´‡∏ß‡∏¢|‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î|‡∏á‡∏ß‡∏î)/i.test(t) || /(‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î|‡∏´‡∏ß‡∏¢).*(‡∏Ç‡πà‡∏≤‡∏ß|‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)/i.test(t))
    return "LUCKY_FROM_NEWS";

  if (/(‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•|‡∏ï‡∏¥‡πä‡∏Å‡∏ï‡πá‡∏≠‡∏Å|tiktok|‡πÄ‡∏ü‡∏ã|facebook|‡πÑ‡∏≠‡∏à‡∏µ|instagram|x |‡∏ó‡∏ß‡∏¥‡∏ï|twitter).*(‡πÄ‡∏•‡∏Ç|‡∏´‡∏ß‡∏¢|‡∏á‡∏ß‡∏î|‡∏°‡∏≤‡πÅ‡∏£‡∏á|‡πÑ‡∏ß‡∏£‡∏±‡∏•)/i.test(t))
    return "LUCKY_FROM_SOCIAL";

  if (/(‡∏ù‡∏±‡∏ô|‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ù‡∏±‡∏ô|‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô)/i.test(t))
    return "LUCKY_FROM_DREAM";

  if (/(‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•|‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†|‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡∏ß‡∏á|‡∏§‡∏Å‡∏©‡πå|‡∏®‡∏≤‡∏•|‡∏ß‡∏±‡∏î|‡πÑ‡∏´‡∏ß‡πâ|‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠|‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏°‡∏á‡∏Ñ‡∏•)/i.test(t))
    return "BELIEF_FAITH";

  if (/(‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î|‡∏Ç‡∏≠‡πÄ‡∏•‡∏Ç|‡πÅ‡∏ô‡∏∞‡πÄ‡∏•‡∏Ç|‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏°‡∏á‡∏Ñ‡∏•|‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô|‡∏≠‡∏≤‡∏¢‡∏∏|‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà|‡πÄ‡∏•‡∏Ç‡∏°‡∏≤‡πÅ‡∏£‡∏á)/i.test(t))
    return "LUCKY_GENERAL";

  return "UNKNOWN";
}

/** ===== Dream Dictionary ===== */
type DreamRule = { keywords: string[]; numbers: string[]; tip?: string };
const DREAM_RULES: DreamRule[] = [
  { keywords: ["‡∏á‡∏π", "‡∏á‡∏π‡∏£‡∏±‡∏î"], numbers: ["56", "65", "5", "6"], tip: "‡∏á‡∏π/‡∏á‡∏π‡∏£‡∏±‡∏î ‚Üí ‡πÄ‡∏•‡∏Ç 5,6 ‡∏°‡∏±‡∏Å‡πÄ‡∏î‡πà‡∏ô" },
  { keywords: ["‡πÄ‡∏î‡πá‡∏Å", "‡∏ó‡∏≤‡∏£‡∏Å"], numbers: ["13", "31", "1", "3"], tip: "‡πÄ‡∏î‡πá‡∏Å ‚Üí 1,3" },
  { keywords: ["‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå", "‡∏ó‡πâ‡∏≠‡∏á", "‡∏Ñ‡∏•‡∏≠‡∏î"], numbers: ["15", "51", "5", "1"] },
  { keywords: ["‡∏û‡∏£‡∏∞", "‡πÄ‡∏à‡πâ‡∏≤‡πÅ‡∏°‡πà", "‡∏®‡∏≤‡∏•", "‡∏ß‡∏±‡∏î"], numbers: ["9", "19", "99"] },
  { keywords: ["‡∏õ‡∏•‡∏≤", "‡∏à‡∏±‡∏ö‡∏õ‡∏•‡∏≤"], numbers: ["17", "71", "7"] },
  { keywords: ["‡∏ü‡∏±‡∏ô‡∏´‡∏•‡∏∏‡∏î", "‡∏ü‡∏±‡∏ô‡∏´‡∏±‡∏Å"], numbers: ["04", "40", "0", "4"] },
  { keywords: ["‡∏ö‡πâ‡∏≤‡∏ô", "‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"], numbers: [], tip: "‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÄ‡∏•‡∏Ç‡∏ö‡πâ‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á/‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà" },
  { keywords: ["‡∏£‡∏ñ", "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ", "‡∏£‡∏ñ‡∏ä‡∏ô"], numbers: [], tip: "‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏à‡∏£‡∏¥‡∏á" },
  { keywords: ["‡∏ô‡πâ‡∏≥", "‡∏ó‡∏∞‡πÄ‡∏•", "‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥", "‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°"], numbers: ["2", "20", "22"] },
  { keywords: ["‡πÑ‡∏ü", "‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ"], numbers: ["6", "66", "69"] },
];

/** ===== News Types ===== */
export type NewsItem = { title: string; url: string; publishedAt?: string; source?: string; imageUrl?: string };

/** ===== Providers: Custom Feed / NewsAPI / SerpAPI ===== */
async function fetchNewsFromCustomFeed(): Promise<NewsItem[]> {
  if (!LUCKY_FEED_URL) return [];
  const res = await fetch(LUCKY_FEED_URL);
  if (!res.ok) return [];
  const json = await res.json();
  if (!Array.isArray(json)) return [];
  return json as NewsItem[];
}

async function fetchNewsFromNewsAPI(query = "‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î OR ‡∏´‡∏ß‡∏¢", lang = "th"): Promise<NewsItem[]> {
  if (!NEWSAPI_KEY) return [];
  const url = new URL("https://newsapi.org/v2/everything");
  url.searchParams.set("q", query);
  url.searchParams.set("language", lang);
  url.searchParams.set("sortBy", "publishedAt");
  url.searchParams.set("pageSize", "10");
  const res = await fetch(url.toString(), { headers: { "X-Api-Key": NEWSAPI_KEY } });
  if (!res.ok) return [];
  const json: any = await res.json();
  return (json.articles || []).map((a: any) => ({
    title: a.title,
    url: a.url,
    publishedAt: a.publishedAt,
    source: a.source?.name,
    imageUrl: a.urlToImage,
  }));
}

async function fetchNewsFromSerpAPI(query = "‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î ‡∏Ç‡πà‡∏≤‡∏ß ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", gl = "th"): Promise<NewsItem[]> {
  if (!SERPAPI_KEY) return [];
  const u = new URL("https://serpapi.com/search.json");
  u.searchParams.set("engine", "google");
  u.searchParams.set("q", query);
  u.searchParams.set("gl", gl);
  u.searchParams.set("api_key", SERPAPI_KEY);
  const res = await fetch(u.toString());
  if (!res.ok) return [];
  const json: any = await res.json();
  const news = json.news_results || json.organic_results || [];
  return news.slice(0, 10).map((n: any) => ({
    title: n.title || n.snippet || "",
    url: n.link || n.source || "",
    publishedAt: n.date || n.date_utc,
    source: n.source || "google",
    imageUrl: n.thumbnail?.static || n.thumbnail?.original,
  }));
}

/** ===== Fallback RSS (no API key) ===== */
const FALLBACK_RSS_SOURCES: { name: string; url: string }[] = [
  { name: "Thairath",  url: "https://www.thairath.co.th/rss/news" },
  { name: "Khaosod",   url: "https://www.khaosod.co.th/feed" },
  { name: "Matichon",  url: "https://www.matichon.co.th/feed" },
  { name: "Sanook",    url: "https://www.sanook.com/news/rss/" },
  { name: "DailyNews", url: "https://www.dailynews.co.th/feed/" },
];
const LUCKY_KEYWORDS = /(‡∏´‡∏ß‡∏¢|‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î|‡∏™‡∏•‡∏≤‡∏Å|‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà|‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏ß‡∏¢|‡πÄ‡∏•‡∏Ç‡∏î‡∏±‡∏á|‡πÄ‡∏Æ‡∏á|‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏ä‡∏Ñ)/i;

function pickTag(text: string, tag: string) {
  const re = new RegExp(`<${tag}[^>]*>([\\s\\S]*?)<\\/${tag}>`, "i");
  const m = text.match(re);
  return m ? m[1].trim() : "";
}
function stripHtml(html: string) {
  return html.replace(/<[^>]+>/g, "").replace(/\s+/g, " ").trim();
}
async function fetchRss(url: string): Promise<NewsItem[]> {
  const res = await fetch(url, { headers: { "User-Agent": "Mozilla/5.0" } });
  if (!res.ok) return [];
  const xml = await res.text();
  const items = xml.match(/<item[\s\S]*?<\/item>/gi) || [];
  const out: NewsItem[] = items.map((it) => {
    const title = stripHtml(pickTag(it, "title"));
    const link = pickTag(it, "link") || pickTag(it, "guid");
    const pub = pickTag(it, "pubDate") || pickTag(it, "updated") || pickTag(it, "dc:date");
    return { title, url: link, publishedAt: pub };
  });
  return out;
}
async function getNewsFromRssFallback(): Promise<NewsItem[]> {
  const all: NewsItem[] = [];
  for (const src of FALLBACK_RSS_SOURCES) {
    try {
      const items = await fetchRss(src.url);
      for (const it of items) {
        if (!it.title) continue;
        if (!LUCKY_KEYWORDS.test(it.title)) continue;
        all.push({ ...it, source: src.name });
      }
    } catch { /* ignore */ }
  }
  const seen = new Set<string>();
  const unique = all.filter((x) => {
    const key = x.url || x.title;
    if (!key || seen.has(key)) return false;
    seen.add(key);
    return true;
  });
  return unique.slice(0, 10);
}

/** ===== Merge news with fallback ===== */
async function getLatestLuckyNews(): Promise<NewsItem[]> {
  const chunks: NewsItem[][] = [];
  try { const a = await fetchNewsFromCustomFeed(); if (a?.length) chunks.push(a); } catch {}
  try { const b = await fetchNewsFromNewsAPI();     if (b?.length) chunks.push(b); } catch {}
  try { const c = await fetchNewsFromSerpAPI();     if (c?.length) chunks.push(c); } catch {}

  const merged: NewsItem[] = [];
  const seen = new Set<string>();
  for (const arr of chunks) {
    for (const it of arr) {
      const key = it.url || it.title;
      if (!key || seen.has(key)) continue;
      seen.add(key);
      merged.push(it);
    }
  }

  if (!merged.length) {
    // ‡∏ñ‡∏≠‡∏¢‡πÑ‡∏õ RSS ‡∏™‡∏≥‡∏£‡∏≠‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ token)
    return await getNewsFromRssFallback();
  }
  return merged.slice(0, 10);
}

/** ===== Render news list with extracted numbers ===== */
function renderNewsLuckyList(items: NewsItem[]): string {
  if (!items.length) {
    return [
      "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞ üóûÔ∏è",
      "‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå: ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î, ‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏ß‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ, ‡πÄ‡∏•‡∏Ç‡∏°‡∏≤‡πÅ‡∏£‡∏á",
      footerNote(),
    ].join("\n");
  }
  const lines = items.map((it) => {
    const nums = extractNumbersFromText(it.title).slice(0, 3).join(", ");
    const when = it.publishedAt
      ? new Date(it.publishedAt).toLocaleString("th-TH", { hour: "2-digit", minute: "2-digit", day: "2-digit", month: "2-digit" })
      : "‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î";
    const src = it.source ? ` ¬∑ ${it.source}` : "";
    return `‚Ä¢ ${it.title}${nums ? ` ‚Üí ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏û‡∏ö: ${nums}` : ""}\n  ${when}${src}\n  ${it.url}`;
  });
  return ["üóûÔ∏è ‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏Ñ‡∏±‡∏î‡∏°‡∏≤‡πÉ‡∏´‡πâ)", ...lines, footerNote()].join("\n");
}

/** ===== Dream & General ===== */
function dreamToNumbers(text: string): { picks: string[]; note?: string } {
  const t = text || "";
  const hits = DREAM_RULES.filter((r) => r.keywords.some((k) => t.includes(k)));
  const found: string[] = [];
  let note = "";

  for (const r of hits) {
    found.push(...r.numbers);
    if (r.tip) note = note || r.tip;
  }
  const inline = extractNumbersFromText(t);
  if (inline.length) found.unshift(...inline);

  const picks = Array.from(new Set(found)).slice(0, 10);
  return { picks, note };
}
function generalLucky(text: string, now = new Date()): { picks: string[]; hint: string } {
  const base = extractNumbersFromText(text);
  if (base.length) return { picks: base.slice(0, 6), hint: "‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°" };

  const d = now;
  const picks = [
    d.getDate().toString().padStart(2, "0"),
    (d.getMonth() + 1).toString().padStart(2, "0"),
    d.getFullYear().toString().slice(-2),
    `${d.getHours().toString().padStart(2, "0")}${Math.floor(d.getMinutes() / 10)}`,
  ];
  return { picks, hint: "‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ‡∏ì ‡∏Ç‡∏ì‡∏∞‡∏ñ‡∏≤‡∏° (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á)" };
}
function beliefReply(): string {
  return [
    "üôè ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠/‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• ‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î ‡∏õ‡∏µ‡∏ô‡∏±‡∏Å‡∏©‡∏±‡∏ï‡∏£ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏°‡∏á‡∏Ñ‡∏• ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå",
    "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡∏ô‡∏¥‡∏¢‡∏°: ‡πÄ‡∏•‡∏Ç‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î, ‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç, ‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö, ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ù‡∏±‡∏ô",
    `‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•? ‡∏ö‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î/‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÅ‡∏•‡πâ‡∏ß‡∏â‡∏±‡∏ô‡∏à‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏∞ (${LINE_HANDLE})`,
    footerNote(),
  ].join("\n");
}

/** ===== Main entry ===== */
export async function answerLotteryAI(userMsg: string, now = new Date()): Promise<string> {
  const intent = detectIntent(userMsg);

  try {
    switch (intent) {
      case "LUCKY_FROM_NEWS": {
        const items = await getLatestLuckyNews();
        return renderNewsLuckyList(items);
      }
      case "LUCKY_FROM_SOCIAL": {
        const items = await getLatestLuckyNews();
        return ["üì£ ‡πÄ‡∏•‡∏Ç‡∏°‡∏≤‡πÅ‡∏£‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•/‡∏™‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå", renderNewsLuckyList(items)].join("\n\n");
      }
      case "LUCKY_FROM_DREAM": {
        const { picks, note } = dreamToNumbers(userMsg);
        const lines = [
          "üõå ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ù‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á)",
          picks.length ? `‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ: ${picks.join(", ")}` : "‡∏¢‡∏±‡∏á‡∏à‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ù‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞",
          note ? `‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${note}` : "",
          footerNote(),
        ].filter(Boolean);
        return lines.join("\n\n");
      }
      case "BELIEF_FAITH": {
        return beliefReply();
      }
      case "LUCKY_GENERAL": {
        const { picks, hint } = generalLucky(userMsg, now);
        const lines = [
          "üîØ ‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•/‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô",
          picks.length ? `‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ${picks.join(", ")}` : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏•‡∏≠‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î/‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞",
          `‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${hint}`,
          footerNote(),
        ];
        return lines.join("\n\n");
      }
      default: {
        if (openai) {
          const systemPrompt = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå ${BRAND_NAME} (LINE OA ${LINE_HANDLE})
‡∏ï‡∏≠‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏ß‡∏¢‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå ‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏• ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß/‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•
- ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß/‡πÄ‡∏•‡∏Ç‡∏°‡∏≤‡πÅ‡∏£‡∏á ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: "‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"
- ‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ù‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á)
- ‡πÑ‡∏ó‡∏¢ ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏°‡∏µ‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡∏≠‡∏ô‡∏ó‡πâ‡∏≤‡∏¢
          `.trim();

          const resp = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            temperature: 0.4,
            messages: [
              { role: "system", content: systemPrompt },
              { role: "user", content: userMsg },
            ],
          });
          const out = resp.choices?.[0]?.message?.content?.trim();
          if (out) return [out, footerNote()].join("\n\n");
        }
        return [
          "‡∏â‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß/‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•, ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ù‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç, ‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏Ñ‡πà‡∏∞",
          "‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå: ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î / ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ù‡∏±‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏á‡∏π / ‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î",
          footerNote(),
        ].join("\n\n");
      }
    }
  } catch (err) {
    console.error("[ai.ts] error", err);
    return ["‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üôè", footerNote()].join("\n\n");
  }
}

/** ‡πÉ‡∏´‡πâ route.ts ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á Flex ‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏î‡πâ */
export async function fetchLuckyNews(): Promise<NewsItem[]> {
  try {
    const items = await getLatestLuckyNews();
    return items;
  } catch {
    return [];
  }
}