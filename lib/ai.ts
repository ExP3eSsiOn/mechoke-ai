// lib/ai.ts
import OpenAI from "openai";

export type AskAIContext = { brandName?: string; lineHandle?: string };

export type LuckyItem = {
  title: string;
  url: string;
  imageUrl?: string;
  source?: string;
  publishedAt?: string;
};

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });

export async function askAI(userText: string, ctx: AskAIContext = {}): Promise<string> {
  const brand = ctx.brandName || process.env.BRAND_NAME || "‡∏°‡∏µ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏≠‡∏ó‡∏Ñ‡∏≠‡∏°";
  const handle = ctx.lineHandle || process.env.LINE_OA_HANDLE || "@mechoke";

  const systemPrompt = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á" ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå ${brand} (LINE OA ${handle})
‡∏™‡πÑ‡∏ï‡∏•‡πå: ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô ‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏û‡∏≠‡∏î‡∏µ
‡∏Ñ‡∏∏‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÇ‡∏õ‡∏£/‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ/‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏ú‡∏• ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô ‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏• ‡∏î‡∏ß‡∏á ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î (‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÑ‡∏°‡πà‡∏ü‡∏±‡∏ô‡∏ò‡∏á‡πÄ‡∏•‡∏Ç)
‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏°‡∏±‡∏Ñ‡∏£ ${process.env.SIGNUP_URL || "https://www.mechoke.com/"} ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ${handle} ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  `.trim();

  const userPrompt = `
‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå: "${userText}"

‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥:
1) ‡∏ï‡∏≠‡∏ö‡πÇ‡∏ó‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
2) ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô/‡∏î‡∏ß‡∏á/‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•: ‡∏ï‡∏≠‡∏ö‡πÄ‡∏ä‡∏¥‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠/‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÑ‡∏°‡πà‡∏ü‡∏±‡∏ô‡∏ò‡∏á‡πÄ‡∏•‡∏Ç‡∏ï‡∏£‡∏á‡πÜ
3) ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ${brand} ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏≠‡∏î‡∏µ
4) ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏û‡∏≠‡∏î‡∏µ
  `.trim();

  try {
    const resp = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      temperature: 0.7,
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt },
      ],
    });
    return resp.choices?.[0]?.message?.content?.trim()
      || "‡∏ô‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ üôè";
  } catch (e) {
    console.error("[askAI error]", e);
    return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ üôè";
  }
}

/** ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô /api/line/push (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î/‡∏î‡∏ß‡∏á‡∏à‡∏≤‡∏Å endpoint ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå */
export async function fetchLuckyNews(limit = 5): Promise<LuckyItem[]> {
  const internalOrigin =
    process.env.LUCKY_INTERNAL_ORIGIN ||
    (process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : "");

  const endpoints = [internalOrigin ? `${internalOrigin}/api/lucky-feed` : ""].filter(Boolean) as string[];

  for (const ep of endpoints) {
    try {
      const res = await fetch(ep, { method: "GET", cache: "no-store" });
      if (!res.ok) continue;
      const data = await res.json();
      const items: LuckyItem[] = Array.isArray(data?.items)
        ? data.items.map((it: any) => ({
            title: String(it.title || ""),
            url: String(it.url || it.link || ""),
            imageUrl: it.imageUrl ? String(it.imageUrl) : undefined,
            source: it.source ? String(it.source) : undefined,
            publishedAt: it.publishedAt ? String(it.publishedAt) : undefined,
          }))
        : [];
      if (items.length) return items.slice(0, limit);
    } catch {}
  }
  return [];
}